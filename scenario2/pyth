#!/usr/bin/python3

import os
import csv 
import sys
import math

steady_state_time = 50
# Compute throughput
 
def throughput(): 
    trace = open('exp1.tr').readlines()
    start_flag = False
    total_bits = 0
    total_pkts = 0
    b_value = 0
    for line in trace: 
        # print(line)
        tru = line.split()
        event = tru[0]
        time = float(tru[1])
        source = tru[2]
        size = int(tru[5])
        fid = tru[7]
        type = tru[4]
        dest = tru[3]
        if fid == '1': 
            if event == '+' and source == '0': 
                if start_flag == False: 
                    start_time = time
                    start_flag = True
            if event == 'r': 
                total_bits += 8*size
                total_pkts += 1
                end_time = time
            if type == 'ack' and dest == '0': 
                b_value += 1

    duration = end_time - start_time
    b_value = total_pkts/b_value # no packets that are acknowledged by an ack
    # print(f'totalBits = {total_bits} duration = {duration} start_time = {start_time} end_time = {end_time}')
    th = total_bits/duration/(1021*1024)
    # print(f"throughput = {th}")
    return str(th), b_value

# Compute drop rate (loss rate ???)
def droprate(): 
    total = 0
    drop = 0
    tlat = 0
    trace = open('exp1.tr').readlines()
    for line in trace: 
        tru = line.split()
        event = tru[0]
        fid = tru[7]
        if fid == '1': 
            if event == 'd': 
                drop = drop + 1
            if event == '+': 
                total = total + 1
    pd = (float(drop)/float(total))
    return pd
    # print(f"drop rate: {pd}")
    # return str(pd)

def analysic_throughput(drop_rate, b_value, B): 
    rtt_total = 0
    rtt_cnt = 0
    rto_total = 0
    rto_cnt = 0
    cwnd_total = 0
    cwnd_cnt = 0

    trace = open('exp2.tr').readlines()
    for line in trace: 
        tru = line.split()
        event = tru[5]
        value = float(tru[6])
        if event == 'rto_': 
            rto_total += value
            rto_cnt += 1
        elif event == 'rtt_': 
            rtt_total += value
            rtt_cnt += 1
        elif event == 'cwnd_': 
            cwnd_total += value
            cwnd_cnt += 1
    
    avg_rtt = rtt_total/rtt_cnt
    avg_rto = rto_total/rto_cnt
    avg_cwnd = cwnd_total/cwnd_cnt
    # print(f'{avg_rtt} {avg_rto} {avg_cwnd} {drop_rate}')
    
    if drop_rate != 0: 
        cal5 = (1.22*8*B)/(avg_rtt*math.sqrt(drop_rate))/(1000*1000)
        cal6_p2 = avg_rtt*math.sqrt(2*b_value*drop_rate/3) + avg_rto * min(1,3*math.sqrt(3*b_value*drop_rate/8)) *drop_rate* (1 + 32*drop_rate*drop_rate)
        cal6_p2 = 1/cal6_p2
        cal6_p1 =avg_cwnd/avg_rtt
        # print(f'b_value = {b_value}')
        # print(f'cal6 p2 = {cal6_p2} cal6 p1 = {cal6_p1}')
        cal6 = min(cal6_p1, cal6_p2)*8*B/1000/1000
    
    return cal5, cal6


# parsing input 

file_name = sys.argv[1]
B=int(sys.argv[2])

# calculate the simulation result 

t, b = throughput()
d = droprate()
cal5, cal6 = analysic_throughput(d, b, B)

print(f' t = {t} d = {d} cal5 = {cal5} cal6 = {cal6}' )
f = open(file_name, 'a')

writer = csv.writer(f)
data = []
data.append(t)
data.append(d)
data.append(cal5)
data.append(cal6)
writer.writerow(data)
f.close()
os.system("rm *.tr")

